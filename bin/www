// Modulo de dependencias.
let app = require('../app');
let debug = require('debug')('sifuentescelldash:server');
let http = require('http');

// Obtener el puerto y almacenarlo en express.
let port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

// Crea el servidor HTTP.
let server = http.createServer(app);

// Escuchando en todas las interfaces de red.
server.listen(port,()=>{
console.log(`Servidor esta activo en http://localhost:${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

// Normaliza un puerto en un nÃºmero, cadena o falso.
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // nombre de tunel
    return val;
  }

  if (port >= 0) {
    // numero de puerto
    return port;
  }

  return false;
}

// Detector de eventos para el evento "error" del servidor HTTP.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Manejo de errores
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Detector de eventos para el evento "escucha" del servidor HTTP.
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}